<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/pai?characterEncoding=utf8">
		</property>
		<property name="user" value="root"></property>
		<property name="password" value="1234"></property>
		<property name="minPoolSize" value="5" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="10" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>zdg/model/User.hbm.xml</value>
				<value>zdg/model/Goods.hbm.xml</value>
				<value>zdg/model/Userlogin.hbm.xml</value>
				<value>zdg/model/AdminUser.hbm.xml</value>
			</list>
		</property>
	</bean>
	<!--user login 部分的依赖注入 -->
	<bean id="logindao" class="zdg.dao.UserLoginDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="loginservice" class="zdg.service.UserLoginServiceImpl">
		<property name="logindao" ref="logindao"></property>
	</bean>
	<bean id="loginaction" class="zdg.action.UserLoginAction" scope="prototype">
		<property name="loginservice" ref="loginservice"></property>
	</bean>

	<!-- user 部分的依赖注入 -->
	<bean id="userdao" class="zdg.dao.UserDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="userservice" class="zdg.service.UserServiceImpl" >
		<property name="userdao" ref="userdao"></property>
	</bean>
	<bean id="useraction" class="zdg.action.UserAction" scope="prototype">
		<property name="userservice" ref="userservice"></property>
	</bean>
	
	<!-- goods 部分的依赖注入 -->
	<bean id="goodsdao" class="zdg.dao.GoodsDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="goodsservice" class="zdg.service.GoodsServiceImpl">
		<property name="goodsdao" ref="goodsdao"></property>
	</bean>
	<bean id="goodsaction" class="zdg.action.GoodsAction" scope="prototype">
		<property name="goodsservice" ref="goodsservice" ></property>
	</bean>
	
	<!-- admin 部分依赖注入 -->
	<bean id="admindao" class="zdg.dao.AdminDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="adminservice" class="zdg.service.AdminServiceImpl">
		<property name="admindao" ref="admindao"></property>
	</bean>
	<bean id="adminaction" class="zdg.action.AdminAction" scope="prototype">
		<property name="adminservice" ref="adminservice" ></property>
	</bean>
</beans>